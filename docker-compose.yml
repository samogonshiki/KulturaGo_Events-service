version: "3.9"

services:
  events-service:
    build: ./events-service
    env_file: .env
    environment:
      LOG_LEVEL:        ${LOG_LEVEL:-info}
      LOG_FILE:         ${LOG_FILE:-}
      DATABASE_URL:     "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/postgres?sslmode=disable"
      REDIS_ADDR:       "redis:6379"
      KAFKA_BROKERS:    "kafka:9092"
      KAFKA_TOPIC:      "events.public"
      EXPORT_BATCH_SIZE: ${EXPORT_BATCH_SIZE:-500}
      EXPORT_INTERVAL:   ${EXPORT_INTERVAL:-5s}
    depends_on: [postgres, redis, kafka]
    volumes:
      - ./logs/events:/app/logs
    ports:
      - "8090:8090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/healthz"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks: [backend]
  redis:
    image: redis:7.2-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    volumes:
      - ./redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    networks: [backend]

  kafka:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    user: root
    depends_on: [zookeeper]
    ports:
      - ${KAFKA_PORT}:9092
      - ${KAFKA_LOCALHOST_PORT}:9093
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,PLAINTEXT://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,PLAINTEXT://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 10485760
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 100001200
    restart: always
    volumes:
      - ./kafka-data:/var/lib/kafka/data
    networks: [backend]

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - ${KAFKA_UI_PORT}:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    depends_on: [kafka]
    volumes:
      - ./kui-data:/etc/kafka-ui
    networks: [backend]

  zookeeper:
    image: zookeeper:${ZK_VERSION}
    ports:
      - ${ZK_PORT}:2181
    restart: always
    volumes:
      - ./zk-data:/var/lib/zookeeper/data
      - ./zk-txn-logs:/var/lib/zookeeper/log
    networks: [backend]

  kafka-setup:
    image: confluentinc/cp-kafka:${CONFLUENT_VERSION}
    depends_on: [kafka]
    restart: "no"
    command: >
      bash -c '
        set -e;
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic calc.tasks   --partitions 3 --replication-factor 1;
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic calc.results --partitions 3 --replication-factor 1;
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic auth-events  --partitions 3 --replication-factor 1;
        kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic events.public --partitions 3 --replication-factor 1;  # ← топик для events-service
      '
    environment:
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks: [backend]

  postgres:
    image: postgres:${PG_VERSION}
    restart: always
    environment:
      POSTGRES_DB:       ${POSTGRES_DB}
      POSTGRES_USER:     ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MS_ACCOUNTS_USER:      ${MS_ACCOUNTS_USER}
      MS_ACCOUNTS_DB:        ${MS_ACCOUNTS_DB}
      MS_ACCOUNTS_PASSWORD:  ${MS_ACCOUNTS_PASSWORD}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./docker/create-postgres-databases.sh:/docker-entrypoint-initdb.d/00-init.sh
    ports:
      - ${PG_PORT}:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks: [backend]

networks:
  backend:
    driver: bridge